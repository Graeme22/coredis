version: '3.2'

services:
  # redis sentinel
  redis-sentinel-master:
    image: "redis:${REDIS_SENTINEL_VERSION:-latest}"
    command: redis-server --port 6380
    ports:
      - '6380:6380'
  redis-sentinel-slave:
    image: "redis:${REDIS_SENTINEL_VERSION:-latest}"
    depends_on: [redis-sentinel-master]
    command: redis-server --port 6381 --slaveof ${HOST_IP} 6380 --slave-announce-ip ${HOST_IP}
    ports:
      - '6381:6381'
  redis-sentinel:
    image: "bitnami/redis-sentinel:${REDIS_SENTINEL_VERSION:-latest}"
    depends_on: [redis-sentinel-slave]
    environment:
      - REDIS_MASTER_SET=coredis
      - REDIS_MASTER_HOST=${HOST_IP}
      - REDIS_MASTER_PORT_NUMBER=6380
      - REDIS_SENTINEL_QUORUM=1
    ports:
      - '26379:26379'
  redis-sentinel-master-auth:
    image: "redis:${REDIS_SENTINEL_VERSION:-latest}"
    command: redis-server --port 6382 --requirepass sekret
    ports:
      - '6382:6382'
  redis-sentinel-slave-auth:
    image: "redis:${REDIS_SENTINEL_VERSION:-latest}"
    depends_on: [redis-sentinel-master-auth]
    command: redis-server --port 6383 --slaveof ${HOST_IP} 6382 --slave-announce-ip ${HOST_IP} --requirepass sekret --masterauth sekret
    ports:
      - '6383:6383'
  redis-sentinel-auth:
    image: "bitnami/redis-sentinel:${REDIS_SENTINEL_VERSION:-latest}"
    depends_on: [redis-sentinel-slave-auth]
    environment:
      - REDIS_MASTER_SET=coredis
      - REDIS_MASTER_HOST=${HOST_IP}
      - REDIS_MASTER_PASSWORD=sekret
      - REDIS_MASTER_PORT_NUMBER=6382
      - REDIS_SENTINEL_PASSWORD=sekret
    ports:
      - '36379:26379'
  # cluster
  redis-cluster-1:
    image: "redis:${REDIS_VERSION:-latest}"
    command: redis-server --port 7000 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    ports:
      - '7000:7000'
      - '17000:17000'
  redis-cluster-2:
    image: "redis:${REDIS_VERSION:-latest}"
    command: redis-server --port 7001 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    depends_on: [redis-cluster-1]
    ports:
      - '7001:7001'
      - '17001:17001'
  redis-cluster-3:
    image: "redis:${REDIS_VERSION:-latest}"
    command: redis-server --port 7002 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    ports:
      - '7002:7002'
      - '17002:17002'
  redis-cluster-4:
    image: "redis:${REDIS_VERSION:-latest}"
    command: redis-server --port 7003 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    depends_on: [redis-cluster-3]
    ports:
      - '7003:7003'
      - '17003:17003'
  redis-cluster-5:
    image: "redis:${REDIS_VERSION:-latest}"
    command: redis-server --port 7004 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    ports:
      - '7004:7004'
      - '17004:17004'
  redis-cluster-6:
    image: "redis:${REDIS_VERSION:-latest}"
    command: redis-server --port 7005 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    depends_on: [redis-cluster-5]
    ports:
      - '7005:7005'
      - '17005:17005'
  redis-cluster-init:
    image: "redis:${REDIS_VERSION:-latest}"
    command: bash -c "echo yes | redis-cli --cluster create --cluster-replicas 1 ${HOST_IP}:7000 ${HOST_IP}:7001 ${HOST_IP}:7002 ${HOST_IP}:7003 ${HOST_IP}:7004 ${HOST_IP}:7005"
    depends_on: [redis-cluster-1, redis-cluster-2, redis-cluster-3, redis-cluster-4, redis-cluster-5, redis-cluster-6]
  redis-basic:
    image: "redis:${REDIS_VERSION:-latest}"
    command: redis-server --port 6379
    ports:
      - '6379:6379'
  redis-auth:
    image: "redis:${REDIS_VERSION:-latest}"
    command: redis-server --port 6389 --requirepass sekret
    ports:
      - '6389:6389'
  redis-ssl:
    image: "redis:${REDIS_SSL_VERSION:-latest}"
    command: redis-server --port 0 --tls-port 8379 --tls-cert-file /tls/redis.crt --tls-key-file /tls/redis.key --tls-ca-cert-file /tls/ca.crt
    ports:
      - '8379:8379'
    volumes:
      - ./tests/tls:/tls
  redis-uds:
    image: "redis:${REDIS_VERSION:-latest}"
    command: sh -c "test ${HOST_OS} = \"Darwin\" && exit || redis-server --port 0 --unixsocket /sockets/coredis.redis.sock --unixsocketperm 777"
    volumes:
      - type: bind
        source: /tmp/
        target: /sockets/
  redis-stack:
    image: "redis/redis-stack:${REDIS_STACK_VERSION:-latest}"
    ports:
      - '9379:6379'
  keydb:
    image: "eqalpha/keydb"
    ports:
      - '10379:6379'
  # keydb cluster
  keydb-cluster-1:
    image: "eqalpha/keydb"
    command: keydb-server --port 8000 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    ports:
      - '8000:8000'
      - '18000:18000'
  keydb-cluster-2:
    image: "eqalpha/keydb"
    command: keydb-server --port 8001 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    depends_on: [keydb-cluster-1]
    ports:
      - '8001:8001'
      - '18001:18001'
  keydb-cluster-3:
    image: "eqalpha/keydb"
    command: keydb-server --port 8002 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    ports:
      - '8002:8002'
      - '18002:18002'
  keydb-cluster-4:
    image: "eqalpha/keydb"
    command: keydb-server --port 8003 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    depends_on: [keydb-cluster-3]
    ports:
      - '8003:8003'
      - '18003:18003'
  keydb-cluster-5:
    image: "eqalpha/keydb"
    command: keydb-server --port 8004 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    ports:
      - '8004:8004'
      - '18004:18004'
  keydb-cluster-6:
    image: "eqalpha/keydb"
    command: keydb-server --port 8005 --protected-mode no --cluster-enabled yes --loglevel verbose --cluster-announce-ip ${HOST_IP}
    depends_on: [keydb-cluster-5]
    ports:
      - '8005:8005'
      - '18005:18005'
  keydb-cluster-init:
    image: "eqalpha/keydb"
    command: bash -c "echo yes | keydb-cli --cluster create --cluster-replicas 1 ${HOST_IP}:8000 ${HOST_IP}:8001 ${HOST_IP}:8002 ${HOST_IP}:8003 ${HOST_IP}:8004 ${HOST_IP}:8005"
    depends_on: [keydb-cluster-1, keydb-cluster-2, keydb-cluster-3, keydb-cluster-4, keydb-cluster-5, keydb-cluster-6]
